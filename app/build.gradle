/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.13/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'java'
    id 'io.gatling.gradle' version '3.13.4'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit test framework.
    testImplementation libs.junit

    // This dependency is used by the application.
    implementation libs.guava
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'org.example.App'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.register('gatlingRunAndArchive') {
    dependsOn 'gatlingRun'
    doLast {
        def timestamp = new Date().format('yyyyMMdd_HHmmss')
        def gatlingReportsDir = file("build/reports/gatling")
        if (gatlingReportsDir.exists()) {
            def reportDirs = gatlingReportsDir.listFiles().findAll { it.isDirectory() }
            reportDirs.sort { a, b -> b.lastModified() <=> a.lastModified() }
            if (reportDirs) {
                def latestDir = reportDirs.first()
                def tail = latestDir.name.split("_").last()
                def destDir = file("../archive/results_${timestamp}/${tail}")
                destDir.mkdirs()
                copy {
                    from latestDir
                    into destDir
                }

                def configDestDir = file("../archive/results_${timestamp}")
                def configDir = file("src/gatling/java/simulations/config")
                if (configDir.exists()) {
                    copy {
                        from configDir
                        into configDestDir
                        rename {"Config_${timestamp}.java"}
                    }
                }

                def logFile = file("C:/Users/kxu45/ProgramStudy/gatling-practice/realticket-gatling-simulations/archive/gatling-log-latest/log_latest.log")
                if (logFile.exists()) {
                    copy {
                        from logFile
                        into destDir
                        rename { "gatling-runtime-log_${timestamp}.log" }
                    }
                } else {
                    println "log_latest.log 파일을 찾을 수 없습니다: ${logFile}"
                }

                println "시뮬레이션 결과가 ${destDir}에 아카이브되었습니다."
            }
        }
    }
}
